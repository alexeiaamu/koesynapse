{
	"name": "Koeflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "liputflow",
						"type": "DatasetReference"
					},
					"name": "liput"
				},
				{
					"dataset": {
						"referenceName": "lennotflow",
						"type": "DatasetReference"
					},
					"name": "lennot"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSynapseAnalyticsTable1",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "select1"
				},
				{
					"name": "filter1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ticket_no as long,",
				"          flight_id as integer,",
				"          fare_conditions as string,",
				"          amount as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> liput",
				"source(output(",
				"          flight_id as integer,",
				"          flight_no as string,",
				"          scheduled_departure as string,",
				"          scheduled_arrival as string,",
				"          departure_airport as string,",
				"          arrival_airport as string,",
				"          status as string,",
				"          aircraft_code as string,",
				"          actual_departure as string,",
				"          actual_arrival as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> lennot",
				"liput, lennot join(liput@flight_id == lennot@flight_id,",
				"     joinType:'outer',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          ticket_no,",
				"          flight_id = liput@flight_id,",
				"          fare_conditions,",
				"          amount,",
				"          flight_no,",
				"          scheduled_departure,",
				"          scheduled_arrival,",
				"          departure_airport,",
				"          arrival_airport,",
				"          status,",
				"          aircraft_code,",
				"          actual_departure,",
				"          actual_arrival",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 filter(!isNull(amount)) ~> filter1",
				"filter1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     staged: true,",
				"     allowCopyCommand: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
			]
		}
	}
}